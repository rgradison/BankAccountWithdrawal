server:
  port: ${SERVER_PORT}
## AWS SNS Configuration
aws:
  sns:    # The output will show an ARN (Amazon Resource Name) for the topic
    topicArn: ${AWS_SNS_TOPIC_ARN}
  region: ${AWS_REGION}
## kafka Config
kafka:
  bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}  # Or your Kafka broker URL
## Spring configs
spring:
  application:
    name: BankAccountWithdrawal  #Application name
  profiles:
    active: ${SPRING_PROFILES_ACTIVE}
  cloud:  # Optionally, enable retry for resilience
    config:
      retry:
        enabled: true  # Retry enabled for resilience
  datasource:
    url: jdbc:mysql://${DB_HOST}:${DB_PORT}/BankAccountWithdrawal  #JDBC URL for MySQL database
    username: ${DB_USERNAME}  #Use externalized username (environment variable DB_USERNAME)
    password: ${DB_PASSWORD}  #Yes password since DB does not require one
    driver-class-name: com.mysql.cj.jdbc.Driver  #MySQL driver
    hikari:
      connection-timeout: 30000  # Connection timeout in milliseconds
      maximum-pool-size: 20  # Maximum number of connections in the pool, # Increased pool size for handling concurrent connections
      minimum-idle: 5  # Minimum idle connections in the pool
      idle-timeout: 60000  # Idle timeout in milliseconds, # 1 min idle timeout
      max-lifetime: 1800000  # Max lifetime for a connection in milliseconds, # 30 min max lifetime
  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect # MySQLDialect for MySQL
    hibernate:
      ddl-auto: validate  # Hibernate DDL auto-update for development (use "validate" or "none" in production)
  mvc:
    throw-exception-if-no-handler-found: true
    resources:
      add-mappings: false
## JWT Configuration
JWT_SECRET: ${JWT_SECRET}  # We can still use Hashicorp vault or AWS secret manager,Azure Key Vault and Kubernetes Secrets
expirationMs: 157784630000  # 6 months
## spring logging
logging:
  level:
    org.springframework: WARN  # Reduced log verbosity for production
    org.springframework.jdbc: INFO  # Set logging level for Spring JDBC to INFO for production
    com.zaxxer.hikari: DEBUG
## Resilience4j Configuration
resilience4j:
  retry:
    instances:
      withdrawRetry:
        maxAttempts: 5
        waitDuration: 1s
      databaseRetry:
        maxAttempts: 3
        waitDuration: 500ms
        retryExceptions:
          - java.sql.SQLException
        ignoreExceptions:
          - java.lang.IllegalArgumentException
  circuitbreaker:
    instances:
      withdrawCircuitBreaker:
        failureRateThreshold: 50
        waitDurationInOpenState: 15000ms
        slidingWindowSize: 10
## Actuator (Monitoring)
management:
  endpoints:
    web:
      exposure:
        include: "health,info"  # Limited to critical endpoints
  endpoint:
    health:
      show-details: "when_authorized" # "always"
    shutdown:
      enabled: false  # Disable shutdown endpoint in production
    metrics:
      tags:
        application: "BankAccountWithdrawal"