server:
  port: 8097  # Application server port
# Set database connection details
db:
  host: ${DB_HOST:localhost}  # Default host is localhost
  port: ${DB_PORT:3306}       # Default port is 3306
  connection:
    jdbcUrl: jdbc:mysql://${db.host}:${db.port}/BankAccountWithdrawal  # JDBC URL using placeholders for host and port
    username: ${DB_USERNAME:root}  # Externalized username (use environment variable DB_USERNAME if available)
    # password: ${DB_PASSWORD:secret}  # Omit if no password is needed
spring:
  application:
    name: BankAccountWithdrawal  # Application name
  security:
    user:
      name: admin
      password: admin123  # Change in production!
  cloud:  # Optionally, enable retry for resilience
    config:
      retry:
        enabled: true  # Retry enabled for resilience
  datasource:
    url: jdbc:mysql://${db.host}:${db.port}/BankAccountWithdrawal  # JDBC URL for MySQL database
    username: ${DB_USERNAME:root}  # Use externalized username (environment variable DB_USERNAME)
    # password: ${DB_PASSWORD}  # No password since DB does not require one
    driver-class-name: com.mysql.cj.jdbc.Driver  # MySQL driver
    hikari:
      connection-timeout: 30000  # Connection timeout in milliseconds
      maximum-pool-size: 10  # Maximum number of connections in the pool
      minimum-idle: 10  # Minimum idle connections in the pool
      idle-timeout: 30000  # Idle timeout in milliseconds
      max-lifetime: 600000  # Max lifetime for a connection in milliseconds
    jpa:
      database-platform: org.hibernate.dialect.MySQLDialect  # MySQLDialect for MySQL
      hibernate:
        ddl-auto: update  # Hibernate DDL auto-update for development (use "validate" or "none" in production)
aws:
  sns:
    topicArn: arn:aws:sns:af-south-1:123456789012:MyTopic  # Optional AWS SNS topic ARN
logging:
  level:
    org:
      springframework:
        jdbc: INFO  # Set logging level for Spring JDBC to INFO for production
resilience4j:
  retry:
    instances:
      withdrawRetry:
        maxAttempts: 3
        waitDuration: 500ms
  circuitbreaker:
    instances:
      withdrawCircuitBreaker:
        failureRateThreshold: 50
        waitDurationInOpenState: 10000ms
        slidingWindowSize: 5
management:
  endpoints:
    web:
      exposure:
        include: "*" #Not recommended in production, just for testing locally.
  endpoint:
    health:
      show-details: "always"
    shutdown:
      enabled: true
    metrics:
      tags:
        application: "BankAccountWithdrawal"